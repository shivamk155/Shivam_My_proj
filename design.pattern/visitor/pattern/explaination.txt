----------> Problem:
https://refactoring.guru/design-patterns/visitor
https://www.youtube.com/watch?v=TeZqKnC2gvA

Imagine that your team develops an app which works with geographic information structured as one colossal graph.
Each node of the graph may represent a complex entity such as a city, but also more granular things like industries,
sightseeing areas, etc. The nodes are connected with others if there’s a road between the real objects that they represent.
Under the hood, each node type is represented by its own class, while each specific node is an object.

At some point, you got a task to implement exporting the graph into XML format.
At first, the job seemed pretty straightforward. You planned to add an export method to each node class
and then leverage recursion to go over each node of the graph, executing the export method.
The solution was simple and elegant: thanks to polymorphism,
you weren’t coupling the code which called the export method to concrete classes of nodes.

Unfortunately, the system architect refused to allow you to alter existing node classes.
He said that the code was already in production and he didn’t want to risk breaking it because of a potential bug in your changes.

Besides, he questioned whether it makes sense to have the XML export code within the node classes.
The primary job of these classes was to work with geodata. The XML export behavior would look alien there.

There was another reason for the refusal. It was highly likely that after this feature was implemented, someone from the marketing
department would ask you to provide the ability to export into a different format, or request some other weird stuff.
This would force you to change those precious and fragile classes again.

-------> Solution:
The Visitor pattern suggests that you place the new behavior into a separate class called visitor,
instead of trying to integrate it into existing classes.
The original object that had to perform the behavior is now passed to one of the visitor’s methods as an argument,
providing the method access to all necessary data contained within the object.

Now, what if that behavior can be executed over objects of different classes?
For example, in our case with XML export, the actual implementation will probably be a little bit different across various node classes.
Thus, the visitor class may define not one, but a set of methods, each of which could take arguments of different types.

You might ask, why don’t we use method overloading? That’s when you give all methods the same name,
even if they support different sets of parameters. Unfortunately, even assuming that our programming language supports it at all
(as Java and C# do), it won’t help us. Since the exact class of a node object is unknown in advance,
the overloading mechanism won’t be able to determine the correct method to execute.
It’ll default to the method that takes an object of the base Node class.

However, the Visitor pattern addresses this problem.
It uses a technique called Double Dispatch, which helps to execute the proper method on an object without cumbersome conditionals.
Instead of letting the client select a proper version of the method to call, how about we delegate
this choice to objects we’re passing to the visitor as an argument? Since the objects know their own classes, they’ll
be able to pick a proper method on the visitor less awkwardly. They “accept” a visitor and tell it what visiting method should be executed.

--------------------------------------------------------------
In object-oriented programming and software engineering, the visitor design pattern is a way of separating an algorithm
from an object structure on which it operates. A practical result of this separation is the ability to add new operations
to existing object structures without modifying the structures. It is one way to follow the open/closed principle.

In essence, the visitor allows adding new virtual functions to a family of classes, without modifying the classes.
Instead, a visitor class is created that implements all of the appropriate specializations of the virtual function.
The visitor takes the instance reference as input, and implements the goal through double dispatch.

--------------------------------------------------------------------------
------------> Where Would I Use This Pattern?
The pattern should be used when you have distinct and unrelated operations to perform across a structure of objects.
This avoids adding in code throughout your object structure that is better kept seperate, so it encourages cleaner code.
You may want to run operations against a set of objects with different interfaces.
Visitors are also valuable if you have to perform a number of unrelated operations across the classes.

In summary, if you want to decouple some logical code from the elements that you're using as input,
visitor is probably the best pattern for the job




**************************Idea is to keep operation apart from the core object classes
credit card interaction with offers is also a very good example.